Sure! To create a JavaScript file that pulls upcoming events from a Google Calendar using the Google Calendar API and presents them inside a `div` element in an HTML document, you need to follow these steps:

1. **Set up a Google Cloud Project**:
   - Create a new project in the [Google Cloud Console](https://console.cloud.google.com/).
   - Enable the Google Calendar API for your project.
   - Create OAuth 2.0 credentials for your project and note the Client ID.

2. **Include the Google APIs Client Library in your HTML**:
   ```html
   <script src="https://apis.google.com/js/api.js"></script>
   ```

3. **Create the HTML structure**:
   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>Google Calendar Events</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <style>
           body {
               font-family: Arial, sans-serif;
               padding: 20px;
           }
           .event {
               margin-bottom: 10px;
               padding: 10px;
               border: 1px solid #ccc;
               border-radius: 5px;
           }
       </style>
   </head>
   <body>
       <h1>Upcoming Events</h1>
       <div id="events"></div>
       <script src="script.js"></script>
   </body>
   </html>
   ```

4. **Write the JavaScript file (`script.js`)**:
   ```javascript
   // Client ID and API key from the Developer Console
   const CLIENT_ID = 'YOUR_CLIENT_ID';
   const API_KEY = 'YOUR_API_KEY';

   // Array of API discovery doc URLs for APIs used by the quickstart
   const DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

   // Authorization scopes required by the API; multiple scopes can be included, separated by spaces.
   const SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

   // On load, called to load the auth2 library and API client library.
   function handleClientLoad() {
       gapi.load('client:auth2', initClient);
   }

   // Initializes the API client library and sets up sign-in state listeners.
   function initClient() {
       gapi.client.init({
           apiKey: API_KEY,
           clientId: CLIENT_ID,
           discoveryDocs: DISCOVERY_DOCS,
           scope: SCOPES
       }).then(() => {
           listUpcomingEvents();
       });
   }

   // Fetch the upcoming events from the user's calendar
   function listUpcomingEvents() {
       gapi.client.calendar.events.list({
           'calendarId': 'primary',
           'timeMin': (new Date()).toISOString(),
           'showDeleted': false,
           'singleEvents': true,
           'maxResults': 10,
           'orderBy': 'startTime'
       }).then(response => {
           const events = response.result.items;
           const eventsDiv = document.getElementById('events');

           if (events.length > 0) {
               for (let i = 0; i < events.length; i++) {
                   const event = events[i];
                   const when = event.start.dateTime || event.start.date;
                   const eventDiv = document.createElement('div');
                   eventDiv.className = 'event';
                   eventDiv.innerHTML = `<strong>${event.summary}</strong><br>${when}`;
                   eventsDiv.appendChild(eventDiv);
               }
           } else {
               eventsDiv.innerHTML = 'No upcoming events found.';
           }
       });
   }

   // Load the API client and auth2 library
   handleClientLoad();
   ```

5. **Replace `YOUR_CLIENT_ID` and `YOUR_API_KEY` with your actual Google Cloud project credentials**.

6. **Host your HTML and JavaScript files on a server or open them directly in a browser**.

This will pull upcoming events from a Google Calendar and display them inside the `div` element on a mobile-friendly HTML page.